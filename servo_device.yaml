## ESPhome servo_device.yaml 
esphome:
  name: blinds
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi
  password: !secret wifi_pw

# Enable logging
debug: 
logger:
  level: debug

# Enable Home Assistant API
api:
  services:
    - service: control_servo
      variables:
        level: float
      then:
        - servo.write:
            id: blinds_tilt
            level: !lambda 'return level / 100.0;'
ota:

output:
  - platform: gpio
    id: 'tilt_1'
    pin: D7
  - platform: gpio
    id: 'tilt_2'
    pin: D8
  - platform: esp8266_pwm
    id: 'blinds_t'
    pin: D0
    frequency: 50 Hz

switch:
  - platform: output
    name: "tilt1"
    output: 'tilt_1'
    id: tilt1
  - platform: output
    name: "tilt2"
    output: 'tilt_2'
    id: tilt2

servo:
  - output: 'blinds_t'
    id: blinds_tilt
    
# binary_sensor:
#   - platform: gpio
#     pin: D3
#     name: "blinds Button"
#     filters:
#       invert:
#     on_multi_click:
#     - timing:
#         - ON for at most 0.5s
#         - OFF for at most 0.5s
#         - ON for at most 0.5s
#         - OFF for at least 0.5s
#       then:
#         - lambda: |
#             if (id(blinds_tilt_control).state == cover::COVER_OPEN) {
#               id(blinds_tilt_control).close();
#             } else {
#               id(blinds_tilt_control).open();
#             }
  
cover:
  - platform: template
    name: "Blinds Tilt"
    id: blinds_tilt_control
    optimistic: true
    open_action:
      - switch.turn_off: tilt2
      - switch.turn_on: tilt1
      - delay: 500ms
      - servo.write:
          id: blinds_tilt
          level: -100.0%
      - delay: 5s
      - switch.turn_off: tilt1
    close_action:
      - switch.turn_off: tilt2
      - switch.turn_on: tilt1
      - delay: 500ms
      - servo.write:
          id: blinds_tilt
          level: 100.0%
      - delay: 5s
      - switch.turn_off: tilt1
    stop_action:
      - switch.turn_off: tilt1
      - switch.turn_off: tilt2

# sensor:
#   - platform: adc
#     pin: A0
#     name: "Blinds Lumens"
#     unit_of_measurement: lux
#     update_interval: 5s
#     filters:
#     - multiply: 3.3
    # filters:
    #   - lambda: |-
    #       return (x / 10000.0) * 2000000.0;
